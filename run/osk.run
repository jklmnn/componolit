
source ${genode_dir}/repos/libports/run/qt5_common.inc
set build_components {
    core init
    drivers/timer
    server/nitpicker app/pointer app/status_bar app/xray_trigger
    drivers/framebuffer drivers/input
    server/report_rom server/rom_filter
    app/onscreenkeyboard
}

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components
create_boot_directory
create_qt5_fs_tar_archive "onscreenkeyboard" "gui"

append config  {
	<config>
		<parent-provides>
			<service name="ROM"/>
			<service name="RAM"/>
			<service name="IRQ"/>
			<service name="IO_MEM"/>
			<service name="IO_PORT"/>
			<service name="PD"/>
			<service name="RM"/>
			<service name="CPU"/>
			<service name="LOG"/>
		</parent-provides>
		<default-route>
			<any-service> <parent/> <any-child/> </any-service>
		</default-route>
                <default caps="100"/>
}

append_platform_drv_config

append config {
	<start name="fb_drv">
		<resource name="RAM" quantum="4M"/>
		<provides><service name="Framebuffer"/></provides>
	</start>
}

append config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
	</start>
}

append config {
	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Report"/> <service name="ROM"/> </provides>
		<config>
			<policy label="status_bar -> focus"      report="nitpicker -> focus"/>
			<policy label="nitpicker_config -> xray" report="xray_trigger -> xray"/>
			<policy label="xray_trigger -> hover"    report="nitpicker -> hover"/>
		</config>
	</start>

	<start name="nitpicker_config">
		<binary name="rom_filter"/>
		<resource name="RAM" quantum="1M"/>
		<provides><service name="ROM"/></provides>
		<config>
			<input name="xray_enabled" rom="xray" node="xray">
				<attribute name="enabled" /> </input>

			<output node="config">
				<inline>
					<report focus="yes" xray="yes" hover="yes" />
					<domain name="pointer" layer="1" origin="pointer"
					        content="client" label="no"/>
					<domain name="panel" layer="2"
					        content="client" label="no" hover="always"/>
				</inline>
				<if>
					<has_value input="xray_enabled" value="no" />
					<then>
						<inline>
							<domain name="launchpad" layer="3"
							        content="client" label="no" hover="always" focus="click"
							        ypos="18" height="-18" />
							<domain name="" layer="3"
							        content="client" label="no" hover="always" focus="click"
							        ypos="18" height="-18" />
						</inline>
					</then>
					<else>
						<inline>
							<domain name="launchpad" layer="3" color="#dd0000"
							        content="tinted" label="yes" hover="focused" focus="click"
							        ypos="18" height="-18" />
							<domain name="" layer="3" color="#55dd34"
							        content="tinted" label="yes" hover="focused" focus="click"
							        ypos="18" height="-18" />
						</inline>
					</else>
				</if>
				<inline>
					<policy label_prefix="pointer"            domain="pointer"/>
					<policy label_prefix="status_bar"         domain="panel"/>
					<default-policy                           domain=""/>

					<global-key name="KEY_SCROLLLOCK" label="xray_trigger -> input" />
					<global-key name="KEY_F1"         label="xray_trigger -> input" />
					<global-key name="KEY_F2"         label="xray_trigger -> input" />
				</inline>
			</output>
		</config>
		<route>
			<service name="ROM" label="xray"> <child name="report_rom"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="xray_trigger">
		<resource name="RAM" quantum="1M"/>
		<config>
			<press   name="KEY_F1" xray="on"/>
			<release name="KEY_F1" xray="off"/>
			<press   name="KEY_F2" xray="toggle"/>
			<hover domain="panel"/>
		</config>
		<route>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="ROM" label="hover"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="nitpicker">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Nitpicker"/></provides>
		<configfile name="nitpicker.config"/>
		<route>
			<service name="ROM" label="nitpicker.config">
				<child name="nitpicker_config"/> </service>
			<service name="Report">
				<child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="pointer">
		<resource name="RAM" quantum="1M"/>
	</start>

	<start name="status_bar">
		<resource name="RAM" quantum="1M"/>
		<route>
			<service name="ROM" label="focus"> <child name="report_rom"/> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

}

append config {
    <start name="onscreenkeyboard" caps="200">
        <resource name="RAM" quantum="80M"/>
        <config>
            <vfs>
		<dir name="dev"> <log/> </dir>
                <tar name="qt5_fs_onscreenkeyboard.tar"/>
            </vfs>
	    <libc stdout="/dev/log" stderr="/dev/log"/>
        </config>
    </start>
}

append config {
    </config>
}

install_config $config

append boot_modules {
	core ld.lib.so init timer
	libc.lib.so
	freetype.lib.so
	gallium.lib.so
	libm.lib.so
	pthread.lib.so
        pcre16.lib.so
        posix.lib.so
	stdcxx.lib.so
	jpeg.lib.so
        libc_pipe.lib.so
        libcrypto.lib.so
        libssl.lib.so
	libpng.lib.so
	zlib.lib.so
	qt5_core.lib.so
	qt5_gui.lib.so
	qt5_widgets.lib.so
	qt5_xml.lib.so
        qt5_network.lib.so
        qt5_qml.lib.so
        qt5_qmlfolderlistmodelplugin.lib.so
        qt5_qquicklayoutsplugin.lib.so
        qt5_qtvirtualkeyboardplugin.lib.so
        qt5_qtvirtualkeyboardstylesplugin.lib.so
        qt5_quick.lib.so
        qt5_svg.lib.so
        fb_drv ps2_drv
	nitpicker pointer status_bar report_rom rom_filter xray_trigger
        onscreenkeyboard
	qt5_fs_onscreenkeyboard.tar
}

append_platform_drv_boot_modules

build_boot_image $boot_modules
append qemu_args "-m 256"
run_genode_until forever
